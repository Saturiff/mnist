
// convert
void ByteArr2FloatArr(byte* prevA, void (Layer::* func)(double*))
{
	double* _data = new double[TOTAL_PIXEL];
	for (int i = 0; i < TOTAL_PIXEL; i++) _data[i] = (double)prevA[i];
	(this->*func)(_data);
	delete[] _data;
}

	
// for debug: put in train
void FindAnswer()
{
	int guessAnswer = 0;
	for (int i = 0; i < outputLayer.neuronNum; i++) if (outputLayer.activation[i] > outputLayer.activation[guessAnswer]) guessAnswer = i;
	fprintf(f, "======== answer = %d   guess = %d   ", Data::label, guessAnswer);
	printf("======== answer = %d   guess = %d\n", Data::label, guessAnswer);
	for (int j = 0; j < 10; j++) fprintf(f, "%f ", outputLayer.activation[j]);
	fprintf(f, "\n");
}

//dropout
, this->dropout = dropout
disableNeuronIndex = nullptr, dropoutCount = 0;
if (dropout != 1.0)
{
	dropoutCount = neuronNum * dropout;
	disableNeuronIndex = new int[dropoutCount];
}

bool IsNeuronEnable(int neuronIdx, Layer* layer)
{
	if (layer == nullptr) layer = this;
	bool isEnable = true;
	if (layer->dropout != 1.0) for (int i = 0; i < layer->dropoutCount; i++) if (layer->disableNeuronIndex[i] == neuronIdx) isEnable = false;
	return isEnable;
}
void RandomDropout()
{
	if (dropout != 1.0)
	{
		int currentIdx = 0;
		for (int i = 0; i < dropoutCount; i++) disableNeuronIndex[i] = -1;
		bool haveSame = false;
		while (currentIdx < dropoutCount)
		{
			int randNeuronIdx = round(rand() * 1.0 / RAND_MAX * (dropoutCount));
			for (int i = 0; i < currentIdx; i++)
			{
				if (disableNeuronIndex[i] == randNeuronIdx)
				{
					haveSame = true;
					break;
				}
			}
			if (!haveSame) disableNeuronIndex[currentIdx++] = randNeuronIdx;
			else           haveSame = false;
		}
		/*printf("drop index = ");
		for (int i = 0; i < dropoutCount; i++)
		{
			printf("%d ", disableNeuronIndex[i]);
		}
		printf("\n");*/
	}
}

